// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module hyper_pad_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 5
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output hyper_pad_reg_pkg::hyper_pad_reg2hw_t reg2hw, // Write


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import hyper_pad_reg_pkg::* ;

  localparam int DW = 4;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic pads_0_smt_0_qs;
  logic pads_0_smt_0_wd;
  logic pads_0_smt_0_we;
  logic pads_0_slw_0_qs;
  logic pads_0_slw_0_wd;
  logic pads_0_slw_0_we;
  logic [1:0] pads_0_drv_0_qs;
  logic [1:0] pads_0_drv_0_wd;
  logic pads_0_drv_0_we;
  logic pads_1_smt_1_qs;
  logic pads_1_smt_1_wd;
  logic pads_1_smt_1_we;
  logic pads_1_slw_1_qs;
  logic pads_1_slw_1_wd;
  logic pads_1_slw_1_we;
  logic [1:0] pads_1_drv_1_qs;
  logic [1:0] pads_1_drv_1_wd;
  logic pads_1_drv_1_we;
  logic pads_2_smt_2_qs;
  logic pads_2_smt_2_wd;
  logic pads_2_smt_2_we;
  logic pads_2_slw_2_qs;
  logic pads_2_slw_2_wd;
  logic pads_2_slw_2_we;
  logic [1:0] pads_2_drv_2_qs;
  logic [1:0] pads_2_drv_2_wd;
  logic pads_2_drv_2_we;
  logic pads_3_smt_3_qs;
  logic pads_3_smt_3_wd;
  logic pads_3_smt_3_we;
  logic pads_3_slw_3_qs;
  logic pads_3_slw_3_wd;
  logic pads_3_slw_3_we;
  logic [1:0] pads_3_drv_3_qs;
  logic [1:0] pads_3_drv_3_wd;
  logic pads_3_drv_3_we;
  logic pads_4_smt_4_qs;
  logic pads_4_smt_4_wd;
  logic pads_4_smt_4_we;
  logic pads_4_slw_4_qs;
  logic pads_4_slw_4_wd;
  logic pads_4_slw_4_we;
  logic [1:0] pads_4_drv_4_qs;
  logic [1:0] pads_4_drv_4_wd;
  logic pads_4_drv_4_we;
  logic pads_5_smt_5_qs;
  logic pads_5_smt_5_wd;
  logic pads_5_smt_5_we;
  logic pads_5_slw_5_qs;
  logic pads_5_slw_5_wd;
  logic pads_5_slw_5_we;
  logic [1:0] pads_5_drv_5_qs;
  logic [1:0] pads_5_drv_5_wd;
  logic pads_5_drv_5_we;
  logic pads_6_smt_6_qs;
  logic pads_6_smt_6_wd;
  logic pads_6_smt_6_we;
  logic pads_6_slw_6_qs;
  logic pads_6_slw_6_wd;
  logic pads_6_slw_6_we;
  logic [1:0] pads_6_drv_6_qs;
  logic [1:0] pads_6_drv_6_wd;
  logic pads_6_drv_6_we;
  logic pads_7_smt_7_qs;
  logic pads_7_smt_7_wd;
  logic pads_7_smt_7_we;
  logic pads_7_slw_7_qs;
  logic pads_7_slw_7_wd;
  logic pads_7_slw_7_we;
  logic [1:0] pads_7_drv_7_qs;
  logic [1:0] pads_7_drv_7_wd;
  logic pads_7_drv_7_we;
  logic pads_8_smt_8_qs;
  logic pads_8_smt_8_wd;
  logic pads_8_smt_8_we;
  logic pads_8_slw_8_qs;
  logic pads_8_slw_8_wd;
  logic pads_8_slw_8_we;
  logic [1:0] pads_8_drv_8_qs;
  logic [1:0] pads_8_drv_8_wd;
  logic pads_8_drv_8_we;
  logic pads_9_smt_9_qs;
  logic pads_9_smt_9_wd;
  logic pads_9_smt_9_we;
  logic pads_9_slw_9_qs;
  logic pads_9_slw_9_wd;
  logic pads_9_slw_9_we;
  logic [1:0] pads_9_drv_9_qs;
  logic [1:0] pads_9_drv_9_wd;
  logic pads_9_drv_9_we;
  logic pads_10_smt_10_qs;
  logic pads_10_smt_10_wd;
  logic pads_10_smt_10_we;
  logic pads_10_slw_10_qs;
  logic pads_10_slw_10_wd;
  logic pads_10_slw_10_we;
  logic [1:0] pads_10_drv_10_qs;
  logic [1:0] pads_10_drv_10_wd;
  logic pads_10_drv_10_we;
  logic pads_11_smt_11_qs;
  logic pads_11_smt_11_wd;
  logic pads_11_smt_11_we;
  logic pads_11_slw_11_qs;
  logic pads_11_slw_11_wd;
  logic pads_11_slw_11_we;
  logic [1:0] pads_11_drv_11_qs;
  logic [1:0] pads_11_drv_11_wd;
  logic pads_11_drv_11_we;
  logic pads_12_smt_12_qs;
  logic pads_12_smt_12_wd;
  logic pads_12_smt_12_we;
  logic pads_12_slw_12_qs;
  logic pads_12_slw_12_wd;
  logic pads_12_slw_12_we;
  logic [1:0] pads_12_drv_12_qs;
  logic [1:0] pads_12_drv_12_wd;
  logic pads_12_drv_12_we;
  logic pads_13_smt_13_qs;
  logic pads_13_smt_13_wd;
  logic pads_13_smt_13_we;
  logic pads_13_slw_13_qs;
  logic pads_13_slw_13_wd;
  logic pads_13_slw_13_we;
  logic [1:0] pads_13_drv_13_qs;
  logic [1:0] pads_13_drv_13_wd;
  logic pads_13_drv_13_we;
  logic pads_14_smt_14_qs;
  logic pads_14_smt_14_wd;
  logic pads_14_smt_14_we;
  logic pads_14_slw_14_qs;
  logic pads_14_slw_14_wd;
  logic pads_14_slw_14_we;
  logic [1:0] pads_14_drv_14_qs;
  logic [1:0] pads_14_drv_14_wd;
  logic pads_14_drv_14_we;
  logic pads_15_smt_15_qs;
  logic pads_15_smt_15_wd;
  logic pads_15_smt_15_we;
  logic pads_15_slw_15_qs;
  logic pads_15_slw_15_wd;
  logic pads_15_slw_15_we;
  logic [1:0] pads_15_drv_15_qs;
  logic [1:0] pads_15_drv_15_wd;
  logic pads_15_drv_15_we;
  logic pads_16_smt_16_qs;
  logic pads_16_smt_16_wd;
  logic pads_16_smt_16_we;
  logic pads_16_slw_16_qs;
  logic pads_16_slw_16_wd;
  logic pads_16_slw_16_we;
  logic [1:0] pads_16_drv_16_qs;
  logic [1:0] pads_16_drv_16_wd;
  logic pads_16_drv_16_we;
  logic pads_17_smt_17_qs;
  logic pads_17_smt_17_wd;
  logic pads_17_smt_17_we;
  logic pads_17_slw_17_qs;
  logic pads_17_slw_17_wd;
  logic pads_17_slw_17_we;
  logic [1:0] pads_17_drv_17_qs;
  logic [1:0] pads_17_drv_17_wd;
  logic pads_17_drv_17_we;
  logic pads_18_smt_18_qs;
  logic pads_18_smt_18_wd;
  logic pads_18_smt_18_we;
  logic pads_18_slw_18_qs;
  logic pads_18_slw_18_wd;
  logic pads_18_slw_18_we;
  logic [1:0] pads_18_drv_18_qs;
  logic [1:0] pads_18_drv_18_wd;
  logic pads_18_drv_18_we;
  logic pads_19_smt_19_qs;
  logic pads_19_smt_19_wd;
  logic pads_19_smt_19_we;
  logic pads_19_slw_19_qs;
  logic pads_19_slw_19_wd;
  logic pads_19_slw_19_we;
  logic [1:0] pads_19_drv_19_qs;
  logic [1:0] pads_19_drv_19_wd;
  logic pads_19_drv_19_we;
  logic pads_20_smt_20_qs;
  logic pads_20_smt_20_wd;
  logic pads_20_smt_20_we;
  logic pads_20_slw_20_qs;
  logic pads_20_slw_20_wd;
  logic pads_20_slw_20_we;
  logic [1:0] pads_20_drv_20_qs;
  logic [1:0] pads_20_drv_20_wd;
  logic pads_20_drv_20_we;
  logic pads_21_smt_21_qs;
  logic pads_21_smt_21_wd;
  logic pads_21_smt_21_we;
  logic pads_21_slw_21_qs;
  logic pads_21_slw_21_wd;
  logic pads_21_slw_21_we;
  logic [1:0] pads_21_drv_21_qs;
  logic [1:0] pads_21_drv_21_wd;
  logic pads_21_drv_21_we;
  logic pads_22_smt_22_qs;
  logic pads_22_smt_22_wd;
  logic pads_22_smt_22_we;
  logic pads_22_slw_22_qs;
  logic pads_22_slw_22_wd;
  logic pads_22_slw_22_we;
  logic [1:0] pads_22_drv_22_qs;
  logic [1:0] pads_22_drv_22_wd;
  logic pads_22_drv_22_we;
  logic pads_23_smt_23_qs;
  logic pads_23_smt_23_wd;
  logic pads_23_smt_23_we;
  logic pads_23_slw_23_qs;
  logic pads_23_slw_23_wd;
  logic pads_23_slw_23_we;
  logic [1:0] pads_23_drv_23_qs;
  logic [1:0] pads_23_drv_23_wd;
  logic pads_23_drv_23_we;
  logic pads_24_smt_24_qs;
  logic pads_24_smt_24_wd;
  logic pads_24_smt_24_we;
  logic pads_24_slw_24_qs;
  logic pads_24_slw_24_wd;
  logic pads_24_slw_24_we;
  logic [1:0] pads_24_drv_24_qs;
  logic [1:0] pads_24_drv_24_wd;
  logic pads_24_drv_24_we;
  logic pads_25_smt_25_qs;
  logic pads_25_smt_25_wd;
  logic pads_25_smt_25_we;
  logic pads_25_slw_25_qs;
  logic pads_25_slw_25_wd;
  logic pads_25_slw_25_we;
  logic [1:0] pads_25_drv_25_qs;
  logic [1:0] pads_25_drv_25_wd;
  logic pads_25_drv_25_we;
  logic pads_26_smt_26_qs;
  logic pads_26_smt_26_wd;
  logic pads_26_smt_26_we;
  logic pads_26_slw_26_qs;
  logic pads_26_slw_26_wd;
  logic pads_26_slw_26_we;
  logic [1:0] pads_26_drv_26_qs;
  logic [1:0] pads_26_drv_26_wd;
  logic pads_26_drv_26_we;
  logic pads_27_smt_27_qs;
  logic pads_27_smt_27_wd;
  logic pads_27_smt_27_we;
  logic pads_27_slw_27_qs;
  logic pads_27_slw_27_wd;
  logic pads_27_slw_27_we;
  logic [1:0] pads_27_drv_27_qs;
  logic [1:0] pads_27_drv_27_wd;
  logic pads_27_drv_27_we;
  logic pads_28_smt_28_qs;
  logic pads_28_smt_28_wd;
  logic pads_28_smt_28_we;
  logic pads_28_slw_28_qs;
  logic pads_28_slw_28_wd;
  logic pads_28_slw_28_we;
  logic [1:0] pads_28_drv_28_qs;
  logic [1:0] pads_28_drv_28_wd;
  logic pads_28_drv_28_we;
  logic pads_29_smt_29_qs;
  logic pads_29_smt_29_wd;
  logic pads_29_smt_29_we;
  logic pads_29_slw_29_qs;
  logic pads_29_slw_29_wd;
  logic pads_29_slw_29_we;
  logic [1:0] pads_29_drv_29_qs;
  logic [1:0] pads_29_drv_29_wd;
  logic pads_29_drv_29_we;
  logic pads_30_smt_30_qs;
  logic pads_30_smt_30_wd;
  logic pads_30_smt_30_we;
  logic pads_30_slw_30_qs;
  logic pads_30_slw_30_wd;
  logic pads_30_slw_30_we;
  logic [1:0] pads_30_drv_30_qs;
  logic [1:0] pads_30_drv_30_wd;
  logic pads_30_drv_30_we;
  logic pads_31_smt_31_qs;
  logic pads_31_smt_31_wd;
  logic pads_31_smt_31_we;
  logic pads_31_slw_31_qs;
  logic pads_31_slw_31_wd;
  logic pads_31_slw_31_we;
  logic [1:0] pads_31_drv_31_qs;
  logic [1:0] pads_31_drv_31_wd;
  logic pads_31_drv_31_we;

  // Register instances

  // Subregister 0 of Multireg pads
  // R[pads_0]: V(False)

  // F[smt_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_0_smt_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_0_smt_0_we),
    .wd     (pads_0_smt_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[0].smt.q ),

    // to register interface (read)
    .qs     (pads_0_smt_0_qs)
  );


  // F[slw_0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_0_slw_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_0_slw_0_we),
    .wd     (pads_0_slw_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[0].slw.q ),

    // to register interface (read)
    .qs     (pads_0_slw_0_qs)
  );


  // F[drv_0]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_0_drv_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_0_drv_0_we),
    .wd     (pads_0_drv_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[0].drv.q ),

    // to register interface (read)
    .qs     (pads_0_drv_0_qs)
  );


  // Subregister 1 of Multireg pads
  // R[pads_1]: V(False)

  // F[smt_1]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_1_smt_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_1_smt_1_we),
    .wd     (pads_1_smt_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[1].smt.q ),

    // to register interface (read)
    .qs     (pads_1_smt_1_qs)
  );


  // F[slw_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_1_slw_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_1_slw_1_we),
    .wd     (pads_1_slw_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[1].slw.q ),

    // to register interface (read)
    .qs     (pads_1_slw_1_qs)
  );


  // F[drv_1]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_1_drv_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_1_drv_1_we),
    .wd     (pads_1_drv_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[1].drv.q ),

    // to register interface (read)
    .qs     (pads_1_drv_1_qs)
  );


  // Subregister 2 of Multireg pads
  // R[pads_2]: V(False)

  // F[smt_2]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_2_smt_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_2_smt_2_we),
    .wd     (pads_2_smt_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[2].smt.q ),

    // to register interface (read)
    .qs     (pads_2_smt_2_qs)
  );


  // F[slw_2]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_2_slw_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_2_slw_2_we),
    .wd     (pads_2_slw_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[2].slw.q ),

    // to register interface (read)
    .qs     (pads_2_slw_2_qs)
  );


  // F[drv_2]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_2_drv_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_2_drv_2_we),
    .wd     (pads_2_drv_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[2].drv.q ),

    // to register interface (read)
    .qs     (pads_2_drv_2_qs)
  );


  // Subregister 3 of Multireg pads
  // R[pads_3]: V(False)

  // F[smt_3]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_3_smt_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_3_smt_3_we),
    .wd     (pads_3_smt_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[3].smt.q ),

    // to register interface (read)
    .qs     (pads_3_smt_3_qs)
  );


  // F[slw_3]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_3_slw_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_3_slw_3_we),
    .wd     (pads_3_slw_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[3].slw.q ),

    // to register interface (read)
    .qs     (pads_3_slw_3_qs)
  );


  // F[drv_3]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_3_drv_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_3_drv_3_we),
    .wd     (pads_3_drv_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[3].drv.q ),

    // to register interface (read)
    .qs     (pads_3_drv_3_qs)
  );


  // Subregister 4 of Multireg pads
  // R[pads_4]: V(False)

  // F[smt_4]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_4_smt_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_4_smt_4_we),
    .wd     (pads_4_smt_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[4].smt.q ),

    // to register interface (read)
    .qs     (pads_4_smt_4_qs)
  );


  // F[slw_4]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_4_slw_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_4_slw_4_we),
    .wd     (pads_4_slw_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[4].slw.q ),

    // to register interface (read)
    .qs     (pads_4_slw_4_qs)
  );


  // F[drv_4]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_4_drv_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_4_drv_4_we),
    .wd     (pads_4_drv_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[4].drv.q ),

    // to register interface (read)
    .qs     (pads_4_drv_4_qs)
  );


  // Subregister 5 of Multireg pads
  // R[pads_5]: V(False)

  // F[smt_5]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_5_smt_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_5_smt_5_we),
    .wd     (pads_5_smt_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[5].smt.q ),

    // to register interface (read)
    .qs     (pads_5_smt_5_qs)
  );


  // F[slw_5]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_5_slw_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_5_slw_5_we),
    .wd     (pads_5_slw_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[5].slw.q ),

    // to register interface (read)
    .qs     (pads_5_slw_5_qs)
  );


  // F[drv_5]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_5_drv_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_5_drv_5_we),
    .wd     (pads_5_drv_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[5].drv.q ),

    // to register interface (read)
    .qs     (pads_5_drv_5_qs)
  );


  // Subregister 6 of Multireg pads
  // R[pads_6]: V(False)

  // F[smt_6]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_6_smt_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_6_smt_6_we),
    .wd     (pads_6_smt_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[6].smt.q ),

    // to register interface (read)
    .qs     (pads_6_smt_6_qs)
  );


  // F[slw_6]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_6_slw_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_6_slw_6_we),
    .wd     (pads_6_slw_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[6].slw.q ),

    // to register interface (read)
    .qs     (pads_6_slw_6_qs)
  );


  // F[drv_6]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_6_drv_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_6_drv_6_we),
    .wd     (pads_6_drv_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[6].drv.q ),

    // to register interface (read)
    .qs     (pads_6_drv_6_qs)
  );


  // Subregister 7 of Multireg pads
  // R[pads_7]: V(False)

  // F[smt_7]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_7_smt_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_7_smt_7_we),
    .wd     (pads_7_smt_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[7].smt.q ),

    // to register interface (read)
    .qs     (pads_7_smt_7_qs)
  );


  // F[slw_7]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_7_slw_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_7_slw_7_we),
    .wd     (pads_7_slw_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[7].slw.q ),

    // to register interface (read)
    .qs     (pads_7_slw_7_qs)
  );


  // F[drv_7]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_7_drv_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_7_drv_7_we),
    .wd     (pads_7_drv_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[7].drv.q ),

    // to register interface (read)
    .qs     (pads_7_drv_7_qs)
  );


  // Subregister 8 of Multireg pads
  // R[pads_8]: V(False)

  // F[smt_8]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_8_smt_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_8_smt_8_we),
    .wd     (pads_8_smt_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[8].smt.q ),

    // to register interface (read)
    .qs     (pads_8_smt_8_qs)
  );


  // F[slw_8]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_8_slw_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_8_slw_8_we),
    .wd     (pads_8_slw_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[8].slw.q ),

    // to register interface (read)
    .qs     (pads_8_slw_8_qs)
  );


  // F[drv_8]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_8_drv_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_8_drv_8_we),
    .wd     (pads_8_drv_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[8].drv.q ),

    // to register interface (read)
    .qs     (pads_8_drv_8_qs)
  );


  // Subregister 9 of Multireg pads
  // R[pads_9]: V(False)

  // F[smt_9]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_9_smt_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_9_smt_9_we),
    .wd     (pads_9_smt_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[9].smt.q ),

    // to register interface (read)
    .qs     (pads_9_smt_9_qs)
  );


  // F[slw_9]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_9_slw_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_9_slw_9_we),
    .wd     (pads_9_slw_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[9].slw.q ),

    // to register interface (read)
    .qs     (pads_9_slw_9_qs)
  );


  // F[drv_9]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_9_drv_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_9_drv_9_we),
    .wd     (pads_9_drv_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[9].drv.q ),

    // to register interface (read)
    .qs     (pads_9_drv_9_qs)
  );


  // Subregister 10 of Multireg pads
  // R[pads_10]: V(False)

  // F[smt_10]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_10_smt_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_10_smt_10_we),
    .wd     (pads_10_smt_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[10].smt.q ),

    // to register interface (read)
    .qs     (pads_10_smt_10_qs)
  );


  // F[slw_10]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_10_slw_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_10_slw_10_we),
    .wd     (pads_10_slw_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[10].slw.q ),

    // to register interface (read)
    .qs     (pads_10_slw_10_qs)
  );


  // F[drv_10]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_10_drv_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_10_drv_10_we),
    .wd     (pads_10_drv_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[10].drv.q ),

    // to register interface (read)
    .qs     (pads_10_drv_10_qs)
  );


  // Subregister 11 of Multireg pads
  // R[pads_11]: V(False)

  // F[smt_11]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_11_smt_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_11_smt_11_we),
    .wd     (pads_11_smt_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[11].smt.q ),

    // to register interface (read)
    .qs     (pads_11_smt_11_qs)
  );


  // F[slw_11]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_11_slw_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_11_slw_11_we),
    .wd     (pads_11_slw_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[11].slw.q ),

    // to register interface (read)
    .qs     (pads_11_slw_11_qs)
  );


  // F[drv_11]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_11_drv_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_11_drv_11_we),
    .wd     (pads_11_drv_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[11].drv.q ),

    // to register interface (read)
    .qs     (pads_11_drv_11_qs)
  );


  // Subregister 12 of Multireg pads
  // R[pads_12]: V(False)

  // F[smt_12]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_12_smt_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_12_smt_12_we),
    .wd     (pads_12_smt_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[12].smt.q ),

    // to register interface (read)
    .qs     (pads_12_smt_12_qs)
  );


  // F[slw_12]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_12_slw_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_12_slw_12_we),
    .wd     (pads_12_slw_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[12].slw.q ),

    // to register interface (read)
    .qs     (pads_12_slw_12_qs)
  );


  // F[drv_12]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_12_drv_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_12_drv_12_we),
    .wd     (pads_12_drv_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[12].drv.q ),

    // to register interface (read)
    .qs     (pads_12_drv_12_qs)
  );


  // Subregister 13 of Multireg pads
  // R[pads_13]: V(False)

  // F[smt_13]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_13_smt_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_13_smt_13_we),
    .wd     (pads_13_smt_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[13].smt.q ),

    // to register interface (read)
    .qs     (pads_13_smt_13_qs)
  );


  // F[slw_13]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_13_slw_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_13_slw_13_we),
    .wd     (pads_13_slw_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[13].slw.q ),

    // to register interface (read)
    .qs     (pads_13_slw_13_qs)
  );


  // F[drv_13]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_13_drv_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_13_drv_13_we),
    .wd     (pads_13_drv_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[13].drv.q ),

    // to register interface (read)
    .qs     (pads_13_drv_13_qs)
  );


  // Subregister 14 of Multireg pads
  // R[pads_14]: V(False)

  // F[smt_14]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_14_smt_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_14_smt_14_we),
    .wd     (pads_14_smt_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[14].smt.q ),

    // to register interface (read)
    .qs     (pads_14_smt_14_qs)
  );


  // F[slw_14]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_14_slw_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_14_slw_14_we),
    .wd     (pads_14_slw_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[14].slw.q ),

    // to register interface (read)
    .qs     (pads_14_slw_14_qs)
  );


  // F[drv_14]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_14_drv_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_14_drv_14_we),
    .wd     (pads_14_drv_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[14].drv.q ),

    // to register interface (read)
    .qs     (pads_14_drv_14_qs)
  );


  // Subregister 15 of Multireg pads
  // R[pads_15]: V(False)

  // F[smt_15]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_15_smt_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_15_smt_15_we),
    .wd     (pads_15_smt_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[15].smt.q ),

    // to register interface (read)
    .qs     (pads_15_smt_15_qs)
  );


  // F[slw_15]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_15_slw_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_15_slw_15_we),
    .wd     (pads_15_slw_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[15].slw.q ),

    // to register interface (read)
    .qs     (pads_15_slw_15_qs)
  );


  // F[drv_15]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_15_drv_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_15_drv_15_we),
    .wd     (pads_15_drv_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[15].drv.q ),

    // to register interface (read)
    .qs     (pads_15_drv_15_qs)
  );


  // Subregister 16 of Multireg pads
  // R[pads_16]: V(False)

  // F[smt_16]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_16_smt_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_16_smt_16_we),
    .wd     (pads_16_smt_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[16].smt.q ),

    // to register interface (read)
    .qs     (pads_16_smt_16_qs)
  );


  // F[slw_16]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_16_slw_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_16_slw_16_we),
    .wd     (pads_16_slw_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[16].slw.q ),

    // to register interface (read)
    .qs     (pads_16_slw_16_qs)
  );


  // F[drv_16]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_16_drv_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_16_drv_16_we),
    .wd     (pads_16_drv_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[16].drv.q ),

    // to register interface (read)
    .qs     (pads_16_drv_16_qs)
  );


  // Subregister 17 of Multireg pads
  // R[pads_17]: V(False)

  // F[smt_17]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_17_smt_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_17_smt_17_we),
    .wd     (pads_17_smt_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[17].smt.q ),

    // to register interface (read)
    .qs     (pads_17_smt_17_qs)
  );


  // F[slw_17]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_17_slw_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_17_slw_17_we),
    .wd     (pads_17_slw_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[17].slw.q ),

    // to register interface (read)
    .qs     (pads_17_slw_17_qs)
  );


  // F[drv_17]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_17_drv_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_17_drv_17_we),
    .wd     (pads_17_drv_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[17].drv.q ),

    // to register interface (read)
    .qs     (pads_17_drv_17_qs)
  );


  // Subregister 18 of Multireg pads
  // R[pads_18]: V(False)

  // F[smt_18]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_18_smt_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_18_smt_18_we),
    .wd     (pads_18_smt_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[18].smt.q ),

    // to register interface (read)
    .qs     (pads_18_smt_18_qs)
  );


  // F[slw_18]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_18_slw_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_18_slw_18_we),
    .wd     (pads_18_slw_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[18].slw.q ),

    // to register interface (read)
    .qs     (pads_18_slw_18_qs)
  );


  // F[drv_18]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_18_drv_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_18_drv_18_we),
    .wd     (pads_18_drv_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[18].drv.q ),

    // to register interface (read)
    .qs     (pads_18_drv_18_qs)
  );


  // Subregister 19 of Multireg pads
  // R[pads_19]: V(False)

  // F[smt_19]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_19_smt_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_19_smt_19_we),
    .wd     (pads_19_smt_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[19].smt.q ),

    // to register interface (read)
    .qs     (pads_19_smt_19_qs)
  );


  // F[slw_19]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_19_slw_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_19_slw_19_we),
    .wd     (pads_19_slw_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[19].slw.q ),

    // to register interface (read)
    .qs     (pads_19_slw_19_qs)
  );


  // F[drv_19]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_19_drv_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_19_drv_19_we),
    .wd     (pads_19_drv_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[19].drv.q ),

    // to register interface (read)
    .qs     (pads_19_drv_19_qs)
  );


  // Subregister 20 of Multireg pads
  // R[pads_20]: V(False)

  // F[smt_20]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_20_smt_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_20_smt_20_we),
    .wd     (pads_20_smt_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[20].smt.q ),

    // to register interface (read)
    .qs     (pads_20_smt_20_qs)
  );


  // F[slw_20]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_20_slw_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_20_slw_20_we),
    .wd     (pads_20_slw_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[20].slw.q ),

    // to register interface (read)
    .qs     (pads_20_slw_20_qs)
  );


  // F[drv_20]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_20_drv_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_20_drv_20_we),
    .wd     (pads_20_drv_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[20].drv.q ),

    // to register interface (read)
    .qs     (pads_20_drv_20_qs)
  );


  // Subregister 21 of Multireg pads
  // R[pads_21]: V(False)

  // F[smt_21]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_21_smt_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_21_smt_21_we),
    .wd     (pads_21_smt_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[21].smt.q ),

    // to register interface (read)
    .qs     (pads_21_smt_21_qs)
  );


  // F[slw_21]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_21_slw_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_21_slw_21_we),
    .wd     (pads_21_slw_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[21].slw.q ),

    // to register interface (read)
    .qs     (pads_21_slw_21_qs)
  );


  // F[drv_21]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_21_drv_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_21_drv_21_we),
    .wd     (pads_21_drv_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[21].drv.q ),

    // to register interface (read)
    .qs     (pads_21_drv_21_qs)
  );


  // Subregister 22 of Multireg pads
  // R[pads_22]: V(False)

  // F[smt_22]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_22_smt_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_22_smt_22_we),
    .wd     (pads_22_smt_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[22].smt.q ),

    // to register interface (read)
    .qs     (pads_22_smt_22_qs)
  );


  // F[slw_22]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_22_slw_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_22_slw_22_we),
    .wd     (pads_22_slw_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[22].slw.q ),

    // to register interface (read)
    .qs     (pads_22_slw_22_qs)
  );


  // F[drv_22]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_22_drv_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_22_drv_22_we),
    .wd     (pads_22_drv_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[22].drv.q ),

    // to register interface (read)
    .qs     (pads_22_drv_22_qs)
  );


  // Subregister 23 of Multireg pads
  // R[pads_23]: V(False)

  // F[smt_23]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_23_smt_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_23_smt_23_we),
    .wd     (pads_23_smt_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[23].smt.q ),

    // to register interface (read)
    .qs     (pads_23_smt_23_qs)
  );


  // F[slw_23]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_23_slw_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_23_slw_23_we),
    .wd     (pads_23_slw_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[23].slw.q ),

    // to register interface (read)
    .qs     (pads_23_slw_23_qs)
  );


  // F[drv_23]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_23_drv_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_23_drv_23_we),
    .wd     (pads_23_drv_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[23].drv.q ),

    // to register interface (read)
    .qs     (pads_23_drv_23_qs)
  );


  // Subregister 24 of Multireg pads
  // R[pads_24]: V(False)

  // F[smt_24]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_24_smt_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_24_smt_24_we),
    .wd     (pads_24_smt_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[24].smt.q ),

    // to register interface (read)
    .qs     (pads_24_smt_24_qs)
  );


  // F[slw_24]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_24_slw_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_24_slw_24_we),
    .wd     (pads_24_slw_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[24].slw.q ),

    // to register interface (read)
    .qs     (pads_24_slw_24_qs)
  );


  // F[drv_24]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_24_drv_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_24_drv_24_we),
    .wd     (pads_24_drv_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[24].drv.q ),

    // to register interface (read)
    .qs     (pads_24_drv_24_qs)
  );


  // Subregister 25 of Multireg pads
  // R[pads_25]: V(False)

  // F[smt_25]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_25_smt_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_25_smt_25_we),
    .wd     (pads_25_smt_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[25].smt.q ),

    // to register interface (read)
    .qs     (pads_25_smt_25_qs)
  );


  // F[slw_25]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_25_slw_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_25_slw_25_we),
    .wd     (pads_25_slw_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[25].slw.q ),

    // to register interface (read)
    .qs     (pads_25_slw_25_qs)
  );


  // F[drv_25]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_25_drv_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_25_drv_25_we),
    .wd     (pads_25_drv_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[25].drv.q ),

    // to register interface (read)
    .qs     (pads_25_drv_25_qs)
  );


  // Subregister 26 of Multireg pads
  // R[pads_26]: V(False)

  // F[smt_26]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_26_smt_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_26_smt_26_we),
    .wd     (pads_26_smt_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[26].smt.q ),

    // to register interface (read)
    .qs     (pads_26_smt_26_qs)
  );


  // F[slw_26]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_26_slw_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_26_slw_26_we),
    .wd     (pads_26_slw_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[26].slw.q ),

    // to register interface (read)
    .qs     (pads_26_slw_26_qs)
  );


  // F[drv_26]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_26_drv_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_26_drv_26_we),
    .wd     (pads_26_drv_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[26].drv.q ),

    // to register interface (read)
    .qs     (pads_26_drv_26_qs)
  );


  // Subregister 27 of Multireg pads
  // R[pads_27]: V(False)

  // F[smt_27]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_27_smt_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_27_smt_27_we),
    .wd     (pads_27_smt_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[27].smt.q ),

    // to register interface (read)
    .qs     (pads_27_smt_27_qs)
  );


  // F[slw_27]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_27_slw_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_27_slw_27_we),
    .wd     (pads_27_slw_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[27].slw.q ),

    // to register interface (read)
    .qs     (pads_27_slw_27_qs)
  );


  // F[drv_27]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_27_drv_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_27_drv_27_we),
    .wd     (pads_27_drv_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[27].drv.q ),

    // to register interface (read)
    .qs     (pads_27_drv_27_qs)
  );


  // Subregister 28 of Multireg pads
  // R[pads_28]: V(False)

  // F[smt_28]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_28_smt_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_28_smt_28_we),
    .wd     (pads_28_smt_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[28].smt.q ),

    // to register interface (read)
    .qs     (pads_28_smt_28_qs)
  );


  // F[slw_28]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_28_slw_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_28_slw_28_we),
    .wd     (pads_28_slw_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[28].slw.q ),

    // to register interface (read)
    .qs     (pads_28_slw_28_qs)
  );


  // F[drv_28]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_28_drv_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_28_drv_28_we),
    .wd     (pads_28_drv_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[28].drv.q ),

    // to register interface (read)
    .qs     (pads_28_drv_28_qs)
  );


  // Subregister 29 of Multireg pads
  // R[pads_29]: V(False)

  // F[smt_29]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_29_smt_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_29_smt_29_we),
    .wd     (pads_29_smt_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[29].smt.q ),

    // to register interface (read)
    .qs     (pads_29_smt_29_qs)
  );


  // F[slw_29]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_29_slw_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_29_slw_29_we),
    .wd     (pads_29_slw_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[29].slw.q ),

    // to register interface (read)
    .qs     (pads_29_slw_29_qs)
  );


  // F[drv_29]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_29_drv_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_29_drv_29_we),
    .wd     (pads_29_drv_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[29].drv.q ),

    // to register interface (read)
    .qs     (pads_29_drv_29_qs)
  );


  // Subregister 30 of Multireg pads
  // R[pads_30]: V(False)

  // F[smt_30]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_30_smt_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_30_smt_30_we),
    .wd     (pads_30_smt_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[30].smt.q ),

    // to register interface (read)
    .qs     (pads_30_smt_30_qs)
  );


  // F[slw_30]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_30_slw_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_30_slw_30_we),
    .wd     (pads_30_slw_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[30].slw.q ),

    // to register interface (read)
    .qs     (pads_30_slw_30_qs)
  );


  // F[drv_30]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_30_drv_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_30_drv_30_we),
    .wd     (pads_30_drv_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[30].drv.q ),

    // to register interface (read)
    .qs     (pads_30_drv_30_qs)
  );


  // Subregister 31 of Multireg pads
  // R[pads_31]: V(False)

  // F[smt_31]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_31_smt_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_31_smt_31_we),
    .wd     (pads_31_smt_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[31].smt.q ),

    // to register interface (read)
    .qs     (pads_31_smt_31_qs)
  );


  // F[slw_31]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pads_31_slw_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_31_slw_31_we),
    .wd     (pads_31_slw_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[31].slw.q ),

    // to register interface (read)
    .qs     (pads_31_slw_31_qs)
  );


  // F[drv_31]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pads_31_drv_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pads_31_drv_31_we),
    .wd     (pads_31_drv_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pads[31].drv.q ),

    // to register interface (read)
    .qs     (pads_31_drv_31_qs)
  );





  logic [31:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == HYPER_PAD_PADS_0_OFFSET);
    addr_hit[ 1] = (reg_addr == HYPER_PAD_PADS_1_OFFSET);
    addr_hit[ 2] = (reg_addr == HYPER_PAD_PADS_2_OFFSET);
    addr_hit[ 3] = (reg_addr == HYPER_PAD_PADS_3_OFFSET);
    addr_hit[ 4] = (reg_addr == HYPER_PAD_PADS_4_OFFSET);
    addr_hit[ 5] = (reg_addr == HYPER_PAD_PADS_5_OFFSET);
    addr_hit[ 6] = (reg_addr == HYPER_PAD_PADS_6_OFFSET);
    addr_hit[ 7] = (reg_addr == HYPER_PAD_PADS_7_OFFSET);
    addr_hit[ 8] = (reg_addr == HYPER_PAD_PADS_8_OFFSET);
    addr_hit[ 9] = (reg_addr == HYPER_PAD_PADS_9_OFFSET);
    addr_hit[10] = (reg_addr == HYPER_PAD_PADS_10_OFFSET);
    addr_hit[11] = (reg_addr == HYPER_PAD_PADS_11_OFFSET);
    addr_hit[12] = (reg_addr == HYPER_PAD_PADS_12_OFFSET);
    addr_hit[13] = (reg_addr == HYPER_PAD_PADS_13_OFFSET);
    addr_hit[14] = (reg_addr == HYPER_PAD_PADS_14_OFFSET);
    addr_hit[15] = (reg_addr == HYPER_PAD_PADS_15_OFFSET);
    addr_hit[16] = (reg_addr == HYPER_PAD_PADS_16_OFFSET);
    addr_hit[17] = (reg_addr == HYPER_PAD_PADS_17_OFFSET);
    addr_hit[18] = (reg_addr == HYPER_PAD_PADS_18_OFFSET);
    addr_hit[19] = (reg_addr == HYPER_PAD_PADS_19_OFFSET);
    addr_hit[20] = (reg_addr == HYPER_PAD_PADS_20_OFFSET);
    addr_hit[21] = (reg_addr == HYPER_PAD_PADS_21_OFFSET);
    addr_hit[22] = (reg_addr == HYPER_PAD_PADS_22_OFFSET);
    addr_hit[23] = (reg_addr == HYPER_PAD_PADS_23_OFFSET);
    addr_hit[24] = (reg_addr == HYPER_PAD_PADS_24_OFFSET);
    addr_hit[25] = (reg_addr == HYPER_PAD_PADS_25_OFFSET);
    addr_hit[26] = (reg_addr == HYPER_PAD_PADS_26_OFFSET);
    addr_hit[27] = (reg_addr == HYPER_PAD_PADS_27_OFFSET);
    addr_hit[28] = (reg_addr == HYPER_PAD_PADS_28_OFFSET);
    addr_hit[29] = (reg_addr == HYPER_PAD_PADS_29_OFFSET);
    addr_hit[30] = (reg_addr == HYPER_PAD_PADS_30_OFFSET);
    addr_hit[31] = (reg_addr == HYPER_PAD_PADS_31_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(HYPER_PAD_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(HYPER_PAD_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(HYPER_PAD_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(HYPER_PAD_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(HYPER_PAD_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(HYPER_PAD_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(HYPER_PAD_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(HYPER_PAD_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(HYPER_PAD_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(HYPER_PAD_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(HYPER_PAD_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(HYPER_PAD_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(HYPER_PAD_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(HYPER_PAD_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(HYPER_PAD_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(HYPER_PAD_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(HYPER_PAD_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(HYPER_PAD_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(HYPER_PAD_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(HYPER_PAD_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(HYPER_PAD_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(HYPER_PAD_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(HYPER_PAD_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(HYPER_PAD_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(HYPER_PAD_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(HYPER_PAD_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(HYPER_PAD_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(HYPER_PAD_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(HYPER_PAD_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(HYPER_PAD_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(HYPER_PAD_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(HYPER_PAD_PERMIT[31] & ~reg_be)))));
  end

  assign pads_0_smt_0_we = addr_hit[0] & reg_we & !reg_error;
  assign pads_0_smt_0_wd = reg_wdata[0];

  assign pads_0_slw_0_we = addr_hit[0] & reg_we & !reg_error;
  assign pads_0_slw_0_wd = reg_wdata[1];

  assign pads_0_drv_0_we = addr_hit[0] & reg_we & !reg_error;
  assign pads_0_drv_0_wd = reg_wdata[3:2];

  assign pads_1_smt_1_we = addr_hit[1] & reg_we & !reg_error;
  assign pads_1_smt_1_wd = reg_wdata[0];

  assign pads_1_slw_1_we = addr_hit[1] & reg_we & !reg_error;
  assign pads_1_slw_1_wd = reg_wdata[1];

  assign pads_1_drv_1_we = addr_hit[1] & reg_we & !reg_error;
  assign pads_1_drv_1_wd = reg_wdata[3:2];

  assign pads_2_smt_2_we = addr_hit[2] & reg_we & !reg_error;
  assign pads_2_smt_2_wd = reg_wdata[0];

  assign pads_2_slw_2_we = addr_hit[2] & reg_we & !reg_error;
  assign pads_2_slw_2_wd = reg_wdata[1];

  assign pads_2_drv_2_we = addr_hit[2] & reg_we & !reg_error;
  assign pads_2_drv_2_wd = reg_wdata[3:2];

  assign pads_3_smt_3_we = addr_hit[3] & reg_we & !reg_error;
  assign pads_3_smt_3_wd = reg_wdata[0];

  assign pads_3_slw_3_we = addr_hit[3] & reg_we & !reg_error;
  assign pads_3_slw_3_wd = reg_wdata[1];

  assign pads_3_drv_3_we = addr_hit[3] & reg_we & !reg_error;
  assign pads_3_drv_3_wd = reg_wdata[3:2];

  assign pads_4_smt_4_we = addr_hit[4] & reg_we & !reg_error;
  assign pads_4_smt_4_wd = reg_wdata[0];

  assign pads_4_slw_4_we = addr_hit[4] & reg_we & !reg_error;
  assign pads_4_slw_4_wd = reg_wdata[1];

  assign pads_4_drv_4_we = addr_hit[4] & reg_we & !reg_error;
  assign pads_4_drv_4_wd = reg_wdata[3:2];

  assign pads_5_smt_5_we = addr_hit[5] & reg_we & !reg_error;
  assign pads_5_smt_5_wd = reg_wdata[0];

  assign pads_5_slw_5_we = addr_hit[5] & reg_we & !reg_error;
  assign pads_5_slw_5_wd = reg_wdata[1];

  assign pads_5_drv_5_we = addr_hit[5] & reg_we & !reg_error;
  assign pads_5_drv_5_wd = reg_wdata[3:2];

  assign pads_6_smt_6_we = addr_hit[6] & reg_we & !reg_error;
  assign pads_6_smt_6_wd = reg_wdata[0];

  assign pads_6_slw_6_we = addr_hit[6] & reg_we & !reg_error;
  assign pads_6_slw_6_wd = reg_wdata[1];

  assign pads_6_drv_6_we = addr_hit[6] & reg_we & !reg_error;
  assign pads_6_drv_6_wd = reg_wdata[3:2];

  assign pads_7_smt_7_we = addr_hit[7] & reg_we & !reg_error;
  assign pads_7_smt_7_wd = reg_wdata[0];

  assign pads_7_slw_7_we = addr_hit[7] & reg_we & !reg_error;
  assign pads_7_slw_7_wd = reg_wdata[1];

  assign pads_7_drv_7_we = addr_hit[7] & reg_we & !reg_error;
  assign pads_7_drv_7_wd = reg_wdata[3:2];

  assign pads_8_smt_8_we = addr_hit[8] & reg_we & !reg_error;
  assign pads_8_smt_8_wd = reg_wdata[0];

  assign pads_8_slw_8_we = addr_hit[8] & reg_we & !reg_error;
  assign pads_8_slw_8_wd = reg_wdata[1];

  assign pads_8_drv_8_we = addr_hit[8] & reg_we & !reg_error;
  assign pads_8_drv_8_wd = reg_wdata[3:2];

  assign pads_9_smt_9_we = addr_hit[9] & reg_we & !reg_error;
  assign pads_9_smt_9_wd = reg_wdata[0];

  assign pads_9_slw_9_we = addr_hit[9] & reg_we & !reg_error;
  assign pads_9_slw_9_wd = reg_wdata[1];

  assign pads_9_drv_9_we = addr_hit[9] & reg_we & !reg_error;
  assign pads_9_drv_9_wd = reg_wdata[3:2];

  assign pads_10_smt_10_we = addr_hit[10] & reg_we & !reg_error;
  assign pads_10_smt_10_wd = reg_wdata[0];

  assign pads_10_slw_10_we = addr_hit[10] & reg_we & !reg_error;
  assign pads_10_slw_10_wd = reg_wdata[1];

  assign pads_10_drv_10_we = addr_hit[10] & reg_we & !reg_error;
  assign pads_10_drv_10_wd = reg_wdata[3:2];

  assign pads_11_smt_11_we = addr_hit[11] & reg_we & !reg_error;
  assign pads_11_smt_11_wd = reg_wdata[0];

  assign pads_11_slw_11_we = addr_hit[11] & reg_we & !reg_error;
  assign pads_11_slw_11_wd = reg_wdata[1];

  assign pads_11_drv_11_we = addr_hit[11] & reg_we & !reg_error;
  assign pads_11_drv_11_wd = reg_wdata[3:2];

  assign pads_12_smt_12_we = addr_hit[12] & reg_we & !reg_error;
  assign pads_12_smt_12_wd = reg_wdata[0];

  assign pads_12_slw_12_we = addr_hit[12] & reg_we & !reg_error;
  assign pads_12_slw_12_wd = reg_wdata[1];

  assign pads_12_drv_12_we = addr_hit[12] & reg_we & !reg_error;
  assign pads_12_drv_12_wd = reg_wdata[3:2];

  assign pads_13_smt_13_we = addr_hit[13] & reg_we & !reg_error;
  assign pads_13_smt_13_wd = reg_wdata[0];

  assign pads_13_slw_13_we = addr_hit[13] & reg_we & !reg_error;
  assign pads_13_slw_13_wd = reg_wdata[1];

  assign pads_13_drv_13_we = addr_hit[13] & reg_we & !reg_error;
  assign pads_13_drv_13_wd = reg_wdata[3:2];

  assign pads_14_smt_14_we = addr_hit[14] & reg_we & !reg_error;
  assign pads_14_smt_14_wd = reg_wdata[0];

  assign pads_14_slw_14_we = addr_hit[14] & reg_we & !reg_error;
  assign pads_14_slw_14_wd = reg_wdata[1];

  assign pads_14_drv_14_we = addr_hit[14] & reg_we & !reg_error;
  assign pads_14_drv_14_wd = reg_wdata[3:2];

  assign pads_15_smt_15_we = addr_hit[15] & reg_we & !reg_error;
  assign pads_15_smt_15_wd = reg_wdata[0];

  assign pads_15_slw_15_we = addr_hit[15] & reg_we & !reg_error;
  assign pads_15_slw_15_wd = reg_wdata[1];

  assign pads_15_drv_15_we = addr_hit[15] & reg_we & !reg_error;
  assign pads_15_drv_15_wd = reg_wdata[3:2];

  assign pads_16_smt_16_we = addr_hit[16] & reg_we & !reg_error;
  assign pads_16_smt_16_wd = reg_wdata[0];

  assign pads_16_slw_16_we = addr_hit[16] & reg_we & !reg_error;
  assign pads_16_slw_16_wd = reg_wdata[1];

  assign pads_16_drv_16_we = addr_hit[16] & reg_we & !reg_error;
  assign pads_16_drv_16_wd = reg_wdata[3:2];

  assign pads_17_smt_17_we = addr_hit[17] & reg_we & !reg_error;
  assign pads_17_smt_17_wd = reg_wdata[0];

  assign pads_17_slw_17_we = addr_hit[17] & reg_we & !reg_error;
  assign pads_17_slw_17_wd = reg_wdata[1];

  assign pads_17_drv_17_we = addr_hit[17] & reg_we & !reg_error;
  assign pads_17_drv_17_wd = reg_wdata[3:2];

  assign pads_18_smt_18_we = addr_hit[18] & reg_we & !reg_error;
  assign pads_18_smt_18_wd = reg_wdata[0];

  assign pads_18_slw_18_we = addr_hit[18] & reg_we & !reg_error;
  assign pads_18_slw_18_wd = reg_wdata[1];

  assign pads_18_drv_18_we = addr_hit[18] & reg_we & !reg_error;
  assign pads_18_drv_18_wd = reg_wdata[3:2];

  assign pads_19_smt_19_we = addr_hit[19] & reg_we & !reg_error;
  assign pads_19_smt_19_wd = reg_wdata[0];

  assign pads_19_slw_19_we = addr_hit[19] & reg_we & !reg_error;
  assign pads_19_slw_19_wd = reg_wdata[1];

  assign pads_19_drv_19_we = addr_hit[19] & reg_we & !reg_error;
  assign pads_19_drv_19_wd = reg_wdata[3:2];

  assign pads_20_smt_20_we = addr_hit[20] & reg_we & !reg_error;
  assign pads_20_smt_20_wd = reg_wdata[0];

  assign pads_20_slw_20_we = addr_hit[20] & reg_we & !reg_error;
  assign pads_20_slw_20_wd = reg_wdata[1];

  assign pads_20_drv_20_we = addr_hit[20] & reg_we & !reg_error;
  assign pads_20_drv_20_wd = reg_wdata[3:2];

  assign pads_21_smt_21_we = addr_hit[21] & reg_we & !reg_error;
  assign pads_21_smt_21_wd = reg_wdata[0];

  assign pads_21_slw_21_we = addr_hit[21] & reg_we & !reg_error;
  assign pads_21_slw_21_wd = reg_wdata[1];

  assign pads_21_drv_21_we = addr_hit[21] & reg_we & !reg_error;
  assign pads_21_drv_21_wd = reg_wdata[3:2];

  assign pads_22_smt_22_we = addr_hit[22] & reg_we & !reg_error;
  assign pads_22_smt_22_wd = reg_wdata[0];

  assign pads_22_slw_22_we = addr_hit[22] & reg_we & !reg_error;
  assign pads_22_slw_22_wd = reg_wdata[1];

  assign pads_22_drv_22_we = addr_hit[22] & reg_we & !reg_error;
  assign pads_22_drv_22_wd = reg_wdata[3:2];

  assign pads_23_smt_23_we = addr_hit[23] & reg_we & !reg_error;
  assign pads_23_smt_23_wd = reg_wdata[0];

  assign pads_23_slw_23_we = addr_hit[23] & reg_we & !reg_error;
  assign pads_23_slw_23_wd = reg_wdata[1];

  assign pads_23_drv_23_we = addr_hit[23] & reg_we & !reg_error;
  assign pads_23_drv_23_wd = reg_wdata[3:2];

  assign pads_24_smt_24_we = addr_hit[24] & reg_we & !reg_error;
  assign pads_24_smt_24_wd = reg_wdata[0];

  assign pads_24_slw_24_we = addr_hit[24] & reg_we & !reg_error;
  assign pads_24_slw_24_wd = reg_wdata[1];

  assign pads_24_drv_24_we = addr_hit[24] & reg_we & !reg_error;
  assign pads_24_drv_24_wd = reg_wdata[3:2];

  assign pads_25_smt_25_we = addr_hit[25] & reg_we & !reg_error;
  assign pads_25_smt_25_wd = reg_wdata[0];

  assign pads_25_slw_25_we = addr_hit[25] & reg_we & !reg_error;
  assign pads_25_slw_25_wd = reg_wdata[1];

  assign pads_25_drv_25_we = addr_hit[25] & reg_we & !reg_error;
  assign pads_25_drv_25_wd = reg_wdata[3:2];

  assign pads_26_smt_26_we = addr_hit[26] & reg_we & !reg_error;
  assign pads_26_smt_26_wd = reg_wdata[0];

  assign pads_26_slw_26_we = addr_hit[26] & reg_we & !reg_error;
  assign pads_26_slw_26_wd = reg_wdata[1];

  assign pads_26_drv_26_we = addr_hit[26] & reg_we & !reg_error;
  assign pads_26_drv_26_wd = reg_wdata[3:2];

  assign pads_27_smt_27_we = addr_hit[27] & reg_we & !reg_error;
  assign pads_27_smt_27_wd = reg_wdata[0];

  assign pads_27_slw_27_we = addr_hit[27] & reg_we & !reg_error;
  assign pads_27_slw_27_wd = reg_wdata[1];

  assign pads_27_drv_27_we = addr_hit[27] & reg_we & !reg_error;
  assign pads_27_drv_27_wd = reg_wdata[3:2];

  assign pads_28_smt_28_we = addr_hit[28] & reg_we & !reg_error;
  assign pads_28_smt_28_wd = reg_wdata[0];

  assign pads_28_slw_28_we = addr_hit[28] & reg_we & !reg_error;
  assign pads_28_slw_28_wd = reg_wdata[1];

  assign pads_28_drv_28_we = addr_hit[28] & reg_we & !reg_error;
  assign pads_28_drv_28_wd = reg_wdata[3:2];

  assign pads_29_smt_29_we = addr_hit[29] & reg_we & !reg_error;
  assign pads_29_smt_29_wd = reg_wdata[0];

  assign pads_29_slw_29_we = addr_hit[29] & reg_we & !reg_error;
  assign pads_29_slw_29_wd = reg_wdata[1];

  assign pads_29_drv_29_we = addr_hit[29] & reg_we & !reg_error;
  assign pads_29_drv_29_wd = reg_wdata[3:2];

  assign pads_30_smt_30_we = addr_hit[30] & reg_we & !reg_error;
  assign pads_30_smt_30_wd = reg_wdata[0];

  assign pads_30_slw_30_we = addr_hit[30] & reg_we & !reg_error;
  assign pads_30_slw_30_wd = reg_wdata[1];

  assign pads_30_drv_30_we = addr_hit[30] & reg_we & !reg_error;
  assign pads_30_drv_30_wd = reg_wdata[3:2];

  assign pads_31_smt_31_we = addr_hit[31] & reg_we & !reg_error;
  assign pads_31_smt_31_wd = reg_wdata[0];

  assign pads_31_slw_31_we = addr_hit[31] & reg_we & !reg_error;
  assign pads_31_slw_31_wd = reg_wdata[1];

  assign pads_31_drv_31_we = addr_hit[31] & reg_we & !reg_error;
  assign pads_31_drv_31_wd = reg_wdata[3:2];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = pads_0_smt_0_qs;
        reg_rdata_next[1] = pads_0_slw_0_qs;
        reg_rdata_next[3:2] = pads_0_drv_0_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = pads_1_smt_1_qs;
        reg_rdata_next[1] = pads_1_slw_1_qs;
        reg_rdata_next[3:2] = pads_1_drv_1_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = pads_2_smt_2_qs;
        reg_rdata_next[1] = pads_2_slw_2_qs;
        reg_rdata_next[3:2] = pads_2_drv_2_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = pads_3_smt_3_qs;
        reg_rdata_next[1] = pads_3_slw_3_qs;
        reg_rdata_next[3:2] = pads_3_drv_3_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = pads_4_smt_4_qs;
        reg_rdata_next[1] = pads_4_slw_4_qs;
        reg_rdata_next[3:2] = pads_4_drv_4_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = pads_5_smt_5_qs;
        reg_rdata_next[1] = pads_5_slw_5_qs;
        reg_rdata_next[3:2] = pads_5_drv_5_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = pads_6_smt_6_qs;
        reg_rdata_next[1] = pads_6_slw_6_qs;
        reg_rdata_next[3:2] = pads_6_drv_6_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = pads_7_smt_7_qs;
        reg_rdata_next[1] = pads_7_slw_7_qs;
        reg_rdata_next[3:2] = pads_7_drv_7_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = pads_8_smt_8_qs;
        reg_rdata_next[1] = pads_8_slw_8_qs;
        reg_rdata_next[3:2] = pads_8_drv_8_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = pads_9_smt_9_qs;
        reg_rdata_next[1] = pads_9_slw_9_qs;
        reg_rdata_next[3:2] = pads_9_drv_9_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = pads_10_smt_10_qs;
        reg_rdata_next[1] = pads_10_slw_10_qs;
        reg_rdata_next[3:2] = pads_10_drv_10_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = pads_11_smt_11_qs;
        reg_rdata_next[1] = pads_11_slw_11_qs;
        reg_rdata_next[3:2] = pads_11_drv_11_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = pads_12_smt_12_qs;
        reg_rdata_next[1] = pads_12_slw_12_qs;
        reg_rdata_next[3:2] = pads_12_drv_12_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = pads_13_smt_13_qs;
        reg_rdata_next[1] = pads_13_slw_13_qs;
        reg_rdata_next[3:2] = pads_13_drv_13_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = pads_14_smt_14_qs;
        reg_rdata_next[1] = pads_14_slw_14_qs;
        reg_rdata_next[3:2] = pads_14_drv_14_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = pads_15_smt_15_qs;
        reg_rdata_next[1] = pads_15_slw_15_qs;
        reg_rdata_next[3:2] = pads_15_drv_15_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = pads_16_smt_16_qs;
        reg_rdata_next[1] = pads_16_slw_16_qs;
        reg_rdata_next[3:2] = pads_16_drv_16_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = pads_17_smt_17_qs;
        reg_rdata_next[1] = pads_17_slw_17_qs;
        reg_rdata_next[3:2] = pads_17_drv_17_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = pads_18_smt_18_qs;
        reg_rdata_next[1] = pads_18_slw_18_qs;
        reg_rdata_next[3:2] = pads_18_drv_18_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = pads_19_smt_19_qs;
        reg_rdata_next[1] = pads_19_slw_19_qs;
        reg_rdata_next[3:2] = pads_19_drv_19_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = pads_20_smt_20_qs;
        reg_rdata_next[1] = pads_20_slw_20_qs;
        reg_rdata_next[3:2] = pads_20_drv_20_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = pads_21_smt_21_qs;
        reg_rdata_next[1] = pads_21_slw_21_qs;
        reg_rdata_next[3:2] = pads_21_drv_21_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = pads_22_smt_22_qs;
        reg_rdata_next[1] = pads_22_slw_22_qs;
        reg_rdata_next[3:2] = pads_22_drv_22_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[0] = pads_23_smt_23_qs;
        reg_rdata_next[1] = pads_23_slw_23_qs;
        reg_rdata_next[3:2] = pads_23_drv_23_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = pads_24_smt_24_qs;
        reg_rdata_next[1] = pads_24_slw_24_qs;
        reg_rdata_next[3:2] = pads_24_drv_24_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[0] = pads_25_smt_25_qs;
        reg_rdata_next[1] = pads_25_slw_25_qs;
        reg_rdata_next[3:2] = pads_25_drv_25_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = pads_26_smt_26_qs;
        reg_rdata_next[1] = pads_26_slw_26_qs;
        reg_rdata_next[3:2] = pads_26_drv_26_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[0] = pads_27_smt_27_qs;
        reg_rdata_next[1] = pads_27_slw_27_qs;
        reg_rdata_next[3:2] = pads_27_drv_27_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = pads_28_smt_28_qs;
        reg_rdata_next[1] = pads_28_slw_28_qs;
        reg_rdata_next[3:2] = pads_28_drv_28_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[0] = pads_29_smt_29_qs;
        reg_rdata_next[1] = pads_29_slw_29_qs;
        reg_rdata_next[3:2] = pads_29_drv_29_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = pads_30_smt_30_qs;
        reg_rdata_next[1] = pads_30_slw_30_qs;
        reg_rdata_next[3:2] = pads_30_drv_30_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[0] = pads_31_smt_31_qs;
        reg_rdata_next[1] = pads_31_slw_31_qs;
        reg_rdata_next[3:2] = pads_31_drv_31_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
